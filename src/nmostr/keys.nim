## Secp256k1 key management - for nmostr.
# Copyright Â© 2023 Gruruya <gruruya.chi4c@slmails.com>
# SPDX-License-Identifier: AGPL-3.0-only

import pkg/[secp256k1, secp256k1/abi, jsony]
from   pkg/stew/byteutils import toHex
from   pkg/stew/arrayops import assign
from   std/sysrand import urandom

export secp256k1
{.push raises: [], inline.}


# Types from `secp256k1` without {.requiresInit.} so that they can be null without using `stew/results`
# It's a workaround for Jsony serialization
type
  SecretKey* = SkSecretKey

  PublicKey* = object
    ## Representation of public key that only reveals the x-coordinate.
    ## Modified from `secp256k1` to not have `{.requiresInit.}`
    data*: secp256k1_xonly_pubkey

  SchnorrSignature* = object
    ## Representation of a Schnorr signature.
    ## Modified from `secp256k1` to not have `{.requiresInit.}`
    data*: array[SkRawSchnorrSignatureSize, byte]

# Equivalent to `secp256k1` types minus {.requireInit.}, so allow casting for interop
converter toPublicKey*(pubkey: SkXOnlyPublicKey): PublicKey = cast[PublicKey](pubkey)
converter toSkXOnlyPublicKey*(pubkey: PublicKey): SkXOnlyPublicKey = cast[SkXOnlyPublicKey](pubkey)
converter toSchnorrSignature*(sig: SkSchnorrSignature): SchnorrSignature = cast[SchnorrSignature](sig)
converter toSkSchnorrSignature*(sig: SchnorrSignature): SkSchnorrSignature = cast[SkSchnorrSignature](sig)


func fromRaw*(T: type PublicKey, data: openArray[byte]): SkResult[T] =
  ## Additionally accepts 33 byte compressed public keys, should upstream this
  if likely data.len == 32: cast[SkResult[PublicKey]](SkXOnlyPublicKey.fromRaw(data))
  elif data.len == 33: cast[SkResult[PublicKey]](SkXOnlyPublicKey.fromRaw(data[1..^1]))
  else: err(static("secp: x-only public key must be 32 or 33 bytes"))

func fromHex*(T: type PublicKey, data: string): SkResult[T] =
  T.fromRaw(? seq[byte].fromHex(data))

func fromRaw*(T: type SchnorrSignature, data: openArray[byte]): SkResult[T] =
  cast[SkResult[SchnorrSignature]](SkSchnorrSignature.fromRaw(data))

func fromHex*(T: type SchnorrSignature, data: string): SkResult[T] =
  T.fromRaw(? seq[byte].fromHex(data))

func toRaw*(pubkey: PublicKey): array[SkRawXOnlyPublicKeySize, byte] =
  ## Wrapper that checks if `pubkey` is uninitialized
  if pubkey == default(PublicKey): return
  secp256k1.toRaw(pubkey)

func toHex*(pubkey: PublicKey): string =
  toHex(toRaw(pubkey))

func `$`*(v: PublicKey | SchnorrSignature): string =
  toHex(v)


func verify*(sig: SchnorrSignature, msg: SkMessage, pubkey: PublicKey): bool =
  ## Wrapper that checks if `pubkey` is uninitialized
  if pubkey == default(typeof pubkey): false
  else: secp256k1.verify(sig, msg, pubkey)

func verify*(sig: SchnorrSignature, msg: openArray[byte], pubkey: PublicKey): bool =
  ## Wrapper that checks if `pubkey` is uninitialized
  if pubkey == default(typeof pubkey): false
  else: secp256k1.verify(sig, msg, pubkey)


type Keypair* = object
  ## Representation of private/public key pair.
  seckey*: SecretKey
  pubkey*: PublicKey

converter toKeypair*(keypair: SkKeyPair): Keypair =
  Keypair(seckey: keypair.seckey, pubkey: keypair.pubkey.toXOnly)

converter toKeypair*(seckey: SecretKey): Keypair =
  Keypair(seckey: seckey, pubkey: seckey.toPublicKey.toXOnly)

{.pop.}
{.push raises: [].}
proc sysRng*(data: var openArray[byte]): bool =
  ## Fill `data` with random bytes generated by your operating system.
  try: assign(data, cast[seq[byte]](urandom(data.len)))
  except OSError: return false
  result = true

{.push inline.}
proc newKeypair*(rng: Rng = sysRng): Keypair {.raises: [OSError].} =
  let secretKey = SkKeyPair.random(rng)
  if secretKey.isOk: toKeypair secretKey.unsafeGet
  else: raise newException(OSError, $secretKey.error()) # Assumes OSError


func parseHook*(s: string, i: var int, v: var PublicKey) {.raises: [JsonError, ValueError].} =
  ## Parse `id` as a hexadecimal encoding (of a sha256 hash).
  var j: string = ""
  parseHook(s, i, j)
  # WARNING: Replaces invalid with nulled pubkey
  v = (PublicKey.fromHex j).valueOr: default(typeof v)

func parseHook*(s: string, i: var int, v: var SchnorrSignature) {.raises: [JsonError, ValueError].} =
  ## Parse `id` as a hexadecimal encoding (of a sha256 hash).
  var j: string = ""
  parseHook(s, i, j)
  # WARNING: Replaces invalid with nulled signature
  v = (SchnorrSignature.fromHex j).valueOr: default(typeof v)

func dumpHook*(s: var string, v: PublicKey | SchnorrSignature) =
  ## Serialize `id`, `pubkey`, and `sig` into hexadecimal.
  dumpHook(s, v.toHex)
